# generate_test_data.py

import json
from datetime import datetime, timedelta, date
import random

def generate_synthetic_trade_data(start_date_str, end_date_str, avg_trades_per_day=10):
    start_date = datetime.strptime(start_date_str, "%Y-%m-%d").date()
    end_date = datetime.strptime(end_date_str, "%Y-%m-%d").date()

    all_trades = []
    trade_id_counter = 1 # User-facing Trade #, sequential within this generated dataset

    current_date = start_date
    while current_date <= end_date:
        # Skip weekends if desired for realistic trading days
        if current_date.weekday() >= 5: # Saturday (5) or Sunday (6)
            current_date += timedelta(days=1)
            continue

        num_trades_today = random.randint(avg_trades_per_day - 3, avg_trades_per_day + 5)
        num_trades_today = max(0, num_trades_today) # Ensure no negative trades

        for _ in range(num_trades_today):
            # Generate random Entry and Exit Times within the current day
            entry_hour = random.randint(9, 15) # Example: 9 AM to 3 PM
            entry_minute = random.randint(0, 59)
            entry_second = random.randint(0, 59)
            entry_time_obj = datetime(current_date.year, current_date.month, current_date.day,
                                      entry_hour, entry_minute, entry_second)

            exit_duration_minutes = random.randint(5, 120) # Trade lasts 5 min to 2 hours
            exit_time_obj = entry_time_obj + timedelta(minutes=exit_duration_minutes)
            
            # Ensure exit time is still on the same day if desired, or handle overnight trades
            if exit_time_obj.date() > current_date:
                exit_time_obj = datetime(current_date.year, current_date.month, current_date.day, 16, 0, 0) # Force close by 4 PM

            # Randomize P&L and points
            futures_type = random.choice(["MES", "ES"])
            size = random.choice([1, 2, 5, 10]) # MES
            if futures_type == "ES":
                size = random.choice([1, 2, 5]) # ES, bigger size is fewer contracts
            
            mf = 50 if futures_type == "ES" else 5 # Multiplier factor

            pnl_direction = random.choices(["win", "loss", "be"], weights=[0.45, 0.45, 0.10], k=1)[0]
            
            points_realized = 0
            realized_pnl = 0

            if pnl_direction == "win":
                points_realized = random.choice([4, 5, 8, 10, 15, 20])
                realized_pnl = points_realized * size * mf
            elif pnl_direction == "loss":
                points_realized = -random.choice([3, 4, 5, 8, 10])
                realized_pnl = points_realized * size * mf
            else: # break-even
                points_realized = 0
                realized_pnl = 0
            
            # Ensure Status matches P&L for consistency with dashboard logic
            status = "Win" if realized_pnl > 0 else ("Lose" if realized_pnl < 0 else "BE")

            # Randomize dropdown values
            trade_came_to_me = random.choice(["Yes", "No", ""])
            with_value = random.choice(["Yes", "No", ""])
            score = random.choice(["A+", "B", "C", ""])
            entry_quality = random.choice([
                "Waited Patiently", "Calm / Standard", "Impulsive / FOMO", 
                "Hesitant / Missed", "Forced / Overtraded", ""
            ])
            emotional_state = random.choice([
                "Calm / Disciplined", "Get back losses", "FOMO", 
                "Fear of giving away profit", "Overconfidence", 
                "Frustration / Impatience", "Distracted", ""
            ])
            sizing = random.choice(["Base", "Increased", "Reduced"])
            notes = random.choice(["", "Good trade", "Missed opportunity", "Overtraded", "Followed plan"])

            trade_entry = {
                "id": None, # Will be auto-generated by SQLite on import
                "Trade #": float(trade_id_counter), # Ensure float type for consistency with DataTable
                "Futures Type": futures_type,
                "Size": float(size),
                "Stop Loss (pts)": float(random.choice([3, 5, 8, 10, 15])),
                "Risk ($)": float(random.choice([mf*5, mf*8, mf*10, mf*15])), # Example risk based on MF
                "Status": status,
                "Points Realized": float(points_realized),
                "Realized P&L": float(realized_pnl),
                "Entry Time": entry_time_obj.strftime("%Y-%m-%d %H:%M:%S"),
                "Exit Time": exit_time_obj.strftime("%Y-%m-%d %H:%M:%S"),
                "Trade came to me": trade_came_to_me,
                "With Value": with_value,
                "Score": score,
                "Entry Quality": entry_quality,
                "Emotional State": emotional_state,
                "Sizing": sizing,
                "Notes": notes,
            }
            all_trades.append(trade_entry)
            trade_id_counter += 1

        current_date += timedelta(days=1)

    return all_trades

if __name__ == "__main__":
    start_date = "2024-01-01"
    end_date = "2025-06-22" # Current date
    
    synthetic_data = generate_synthetic_trade_data(start_date, end_date)
    
    output_filename = f"allData_synthetic_{start_date.replace('-', '')}_{end_date.replace('-', '')}.json"
    with open(output_filename, 'w') as f:
        json.dump(synthetic_data, f, indent=2)
    
    print(f"Generated {len(synthetic_data)} synthetic trades to {output_filename}")